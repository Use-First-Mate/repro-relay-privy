import "~/styles/globals.css";
import { PrivyProvider } from '@privy-io/react-auth'
import { WagmiProvider, createConfig } from '@privy-io/wagmi'
import { http } from 'wagmi'
import { base } from 'wagmi/chains'
import { SmartWalletsProvider } from '@privy-io/react-auth/smart-wallets'
import { env } from '~/env'
import { type Metadata } from "next";
import { Geist } from "next/font/google";
import { TRPCReactProvider } from "~/trpc/react";
import { getRPCUrl } from "~/utils/getRPCUrl";

export const metadata: Metadata = {
  title: "Create T3 App",
  description: "Generated by create-t3-app",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
};

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});
const wagmiConfig = createConfig({
  chains: [base],
  transports: {
    [base.id]: http(getRPCUrl(base.id)),
  },
})
declare module 'wagmi' {
  interface Register {
    config: typeof wagmiConfig;
  }
}

export default function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {
  return (
    <html lang="en" className={`${geist.variable}`}>
      <body>
        <PrivyProvider
          appId={env.NEXT_PUBLIC_PRIVY_APP_ID}
          config={{
            defaultChain: base,
            supportedChains: [base],
            loginMethods: ['email'],

            embeddedWallets: {
              createOnLogin: 'all-users',
            },
          }}
        > 
          <SmartWalletsProvider>
            <TRPCReactProvider>
              <WagmiProvider config={wagmiConfig}>{children}</WagmiProvider>
            </TRPCReactProvider>  
          </SmartWalletsProvider>
        </PrivyProvider>
      </body>
    </html>
  );
}